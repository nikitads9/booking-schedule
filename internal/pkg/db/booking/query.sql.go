// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package booking

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addBooking = `-- name: AddBooking :exec
INSERT INTO bookings 
(id, user_id, suite_id, start_date, end_date, created_at, notify_at)
VALUES ($1,$2,$3,$4,$5,$6, notify_at = $7)
`

type AddBookingParams struct {
	ID        pgtype.UUID      `db:"id"`
	UserID    int64            `db:"user_id"`
	SuiteID   int64            `db:"suite_id"`
	StartDate pgtype.Timestamp `db:"start_date"`
	EndDate   pgtype.Timestamp `db:"end_date"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	NotifyAt  pgtype.Interval  `db:"notify_at"`
}

func (q *Queries) AddBooking(ctx context.Context, arg AddBookingParams) error {
	_, err := q.db.Exec(ctx, addBooking,
		arg.ID,
		arg.UserID,
		arg.SuiteID,
		arg.StartDate,
		arg.EndDate,
		arg.CreatedAt,
		arg.NotifyAt,
	)
	return err
}

const checkAvailibility = `-- name: CheckAvailibility :one
SELECT NOT EXISTS (
    SELECT 1 FROM bookings b
    WHERE ((b.suite_id = $2 AND (
        (b.start_date >= $4::text AND b.start_date <= $5::text) OR (b.end_date >= $4::text AND b.end_date <= $5::text)
        ))) ) as availible, 
        (SELECT EXISTS (
            SELECT 1 FROM bookings b
            WHERE (((b.suite_id = $2 AND (b.user_id = $3 AND b.id = $1)) 
            AND 
            ((b.start_date > $4::text AND b.start_date < $5::text) OR (b.end_date > $4::text AND b.end_date < $5::text)))) )) as occupied_by_client
`

type CheckAvailibilityParams struct {
	ID        pgtype.UUID `db:"id"`
	SuiteID   int64       `db:"suite_id"`
	UserID    int64       `db:"user_id"`
	Startdate string      `db:"startdate"`
	Enddate   string      `db:"enddate"`
}

type CheckAvailibilityRow struct {
	Availible        bool `db:"availible"`
	OccupiedByClient bool `db:"occupied_by_client"`
}

func (q *Queries) CheckAvailibility(ctx context.Context, arg CheckAvailibilityParams) (CheckAvailibilityRow, error) {
	row := q.db.QueryRow(ctx, checkAvailibility,
		arg.ID,
		arg.SuiteID,
		arg.UserID,
		arg.Startdate,
		arg.Enddate,
	)
	var i CheckAvailibilityRow
	err := row.Scan(&i.Availible, &i.OccupiedByClient)
	return i, err
}

const deleteBooking = `-- name: DeleteBooking :exec
DELETE 
FROM bookings 
WHERE (id = $1 AND user_id = $2)
`

type DeleteBookingParams struct {
	ID     pgtype.UUID `db:"id"`
	UserID int64       `db:"user_id"`
}

func (q *Queries) DeleteBooking(ctx context.Context, arg DeleteBookingParams) error {
	_, err := q.db.Exec(ctx, deleteBooking, arg.ID, arg.UserID)
	return err
}

const deleteBookingsBeforeDate = `-- name: DeleteBookingsBeforeDate :exec
DELETE 
FROM bookings 
WHERE end_date < $1
`

func (q *Queries) DeleteBookingsBeforeDate(ctx context.Context, endDate pgtype.Timestamp) error {
	_, err := q.db.Exec(ctx, deleteBookingsBeforeDate, endDate)
	return err
}

const getBooking = `-- name: GetBooking :one
SELECT id, suite_id, start_date, end_date, notify_at, created_at, updated_at, user_id 
FROM bookings 
WHERE (id = $1 AND user_id = $2)
`

type GetBookingParams struct {
	ID     pgtype.UUID `db:"id"`
	UserID int64       `db:"user_id"`
}

type GetBookingRow struct {
	ID        pgtype.UUID      `db:"id"`
	SuiteID   int64            `db:"suite_id"`
	StartDate pgtype.Timestamp `db:"start_date"`
	EndDate   pgtype.Timestamp `db:"end_date"`
	NotifyAt  pgtype.Interval  `db:"notify_at"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at"`
	UserID    int64            `db:"user_id"`
}

func (q *Queries) GetBooking(ctx context.Context, arg GetBookingParams) (GetBookingRow, error) {
	row := q.db.QueryRow(ctx, getBooking, arg.ID, arg.UserID)
	var i GetBookingRow
	err := row.Scan(
		&i.ID,
		&i.SuiteID,
		&i.StartDate,
		&i.EndDate,
		&i.NotifyAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getBookingListByDate = `-- name: GetBookingListByDate :many
SELECT id, suite_id, start_date, end_date, notify_at, created_at, updated_at, user_id 
FROM bookings 
WHERE 
((start_date > $1 AND start_date <= $2::text) 
OR 
(start_date-notify_at > $1 AND start_date-notify_at <= $2::text))
`

type GetBookingListByDateParams struct {
	StartDate pgtype.Timestamp `db:"start_date"`
	Enddate   string           `db:"enddate"`
}

type GetBookingListByDateRow struct {
	ID        pgtype.UUID      `db:"id"`
	SuiteID   int64            `db:"suite_id"`
	StartDate pgtype.Timestamp `db:"start_date"`
	EndDate   pgtype.Timestamp `db:"end_date"`
	NotifyAt  pgtype.Interval  `db:"notify_at"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at"`
	UserID    int64            `db:"user_id"`
}

func (q *Queries) GetBookingListByDate(ctx context.Context, arg GetBookingListByDateParams) ([]GetBookingListByDateRow, error) {
	rows, err := q.db.Query(ctx, getBookingListByDate, arg.StartDate, arg.Enddate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookingListByDateRow
	for rows.Next() {
		var i GetBookingListByDateRow
		if err := rows.Scan(
			&i.ID,
			&i.SuiteID,
			&i.StartDate,
			&i.EndDate,
			&i.NotifyAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookings = `-- name: GetBookings :many
SELECT id, suite_id, start_date, end_date, notify_at, created_at, updated_at, user_id 
FROM bookings 
WHERE (user_id = $1 AND ((start_date >= $2::text AND start_date <= $3::text) 
OR 
(end_date >= $2::text AND end_date <= $3::text)))
`

type GetBookingsParams struct {
	UserID    int64  `db:"user_id"`
	Startdate string `db:"startdate"`
	Enddate   string `db:"enddate"`
}

type GetBookingsRow struct {
	ID        pgtype.UUID      `db:"id"`
	SuiteID   int64            `db:"suite_id"`
	StartDate pgtype.Timestamp `db:"start_date"`
	EndDate   pgtype.Timestamp `db:"end_date"`
	NotifyAt  pgtype.Interval  `db:"notify_at"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at"`
	UserID    int64            `db:"user_id"`
}

func (q *Queries) GetBookings(ctx context.Context, arg GetBookingsParams) ([]GetBookingsRow, error) {
	rows, err := q.db.Query(ctx, getBookings, arg.UserID, arg.Startdate, arg.Enddate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookingsRow
	for rows.Next() {
		var i GetBookingsRow
		if err := rows.Scan(
			&i.ID,
			&i.SuiteID,
			&i.StartDate,
			&i.EndDate,
			&i.NotifyAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOccupiedIntervals = `-- name: GetOccupiedIntervals :many
SELECT start_date as start, end_date as end 
FROM bookings 
WHERE (suite_id = $1 AND (end_date > $2::text AND start_date < $3::text)) 
ORDER BY start_date
`

type GetOccupiedIntervalsParams struct {
	SuiteID int64  `db:"suite_id"`
	Now     string `db:"now"`
	Month   string `db:"month"`
}

type GetOccupiedIntervalsRow struct {
	Start pgtype.Timestamp `db:"start"`
	End   pgtype.Timestamp `db:"end"`
}

func (q *Queries) GetOccupiedIntervals(ctx context.Context, arg GetOccupiedIntervalsParams) ([]GetOccupiedIntervalsRow, error) {
	rows, err := q.db.Query(ctx, getOccupiedIntervals, arg.SuiteID, arg.Now, arg.Month)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOccupiedIntervalsRow
	for rows.Next() {
		var i GetOccupiedIntervalsRow
		if err := rows.Scan(&i.Start, &i.End); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVacantRooms = `-- name: GetVacantRooms :many
SELECT DISTINCT rooms.id AS suite_id, name, capacity 
FROM rooms 
WHERE NOT EXISTS (
    SELECT 1 FROM bookings AS e 
    WHERE (e.suite_id=rooms.id AND ((e.start_date < $1::text AND e.end_date > $2::text) 
    OR 
    (e.start_date < $2::text AND e.end_date > $1::text)))) 
    OR 
    NOT EXISTS (SELECT DISTINCT suite_id FROM bookings)
`

type GetVacantRoomsParams struct {
	Startdate string `db:"startdate"`
	Enddate   string `db:"enddate"`
}

type GetVacantRoomsRow struct {
	SuiteID  int64       `db:"suite_id"`
	Name     pgtype.Text `db:"name"`
	Capacity int32       `db:"capacity"`
}

func (q *Queries) GetVacantRooms(ctx context.Context, arg GetVacantRoomsParams) ([]GetVacantRoomsRow, error) {
	rows, err := q.db.Query(ctx, getVacantRooms, arg.Startdate, arg.Enddate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVacantRoomsRow
	for rows.Next() {
		var i GetVacantRoomsRow
		if err := rows.Scan(&i.SuiteID, &i.Name, &i.Capacity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBooking = `-- name: UpdateBooking :exec
UPDATE bookings 
SET suite_id = $3, start_date = $4, end_date = $5, notify_at = $7, updated_at = $6
WHERE (id = $1 AND user_id = $2)
`

type UpdateBookingParams struct {
	ID        pgtype.UUID      `db:"id"`
	UserID    int64            `db:"user_id"`
	SuiteID   int64            `db:"suite_id"`
	StartDate pgtype.Timestamp `db:"start_date"`
	EndDate   pgtype.Timestamp `db:"end_date"`
	UpdatedAt pgtype.Timestamp `db:"updated_at"`
	NotifyAt  pgtype.Interval  `db:"notify_at"`
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) error {
	_, err := q.db.Exec(ctx, updateBooking,
		arg.ID,
		arg.UserID,
		arg.SuiteID,
		arg.StartDate,
		arg.EndDate,
		arg.UpdatedAt,
		arg.NotifyAt,
	)
	return err
}
