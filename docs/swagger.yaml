basePath: /bookings
definitions:
  AddBookingRequest:
    properties:
      endDate:
        description: Дата и время окончания бронировании
        example: "2024-03-29T17:43:00Z"
        type: string
      notifyAt:
        description: Интервал времени для предварительного уведомления о бронировании
        example: 24h
        type: string
      startDate:
        description: Дата и время начала бронировании
        example: "2024-03-28T17:43:00Z"
        type: string
      suiteID:
        description: Номер апаратаментов
        example: 1
        type: integer
    required:
    - endDate
    - startDate
    - suiteID
    type: object
  AddBookingResponse:
    properties:
      bookingID:
        example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        type: string
      response:
        $ref: '#/definitions/Response'
    type: object
  BookingInfo:
    properties:
      BookingID:
        description: Уникальный идентификатор бронирования
        example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        type: string
      createdAt:
        description: Дата и время создания
        example: "2024-03-27T17:43:00Z"
        type: string
      endDate:
        description: Дата и время окончания бронировании
        example: "2024-03-29T17:43:00Z"
        type: string
      notifyAt:
        description: Интервал времени для уведомления о бронировании
        example: 24h00m00s
        type: string
      startDate:
        description: Дата и время начала бронировании
        example: "2024-03-28T17:43:00Z"
        type: string
      suiteID:
        description: Номер апартаментов
        example: 1
        type: integer
      updatedAt:
        description: Дата и время обновления
        example: "2024-03-27T18:43:00Z"
        type: string
      userID:
        description: Идентификатор владельца бронирования
        example: 1
        type: integer
    type: object
  DeleteBookingResponse:
    properties:
      response:
        $ref: '#/definitions/Response'
    type: object
  GetBookingResponse:
    properties:
      booking:
        $ref: '#/definitions/BookingInfo'
      response:
        $ref: '#/definitions/Response'
    type: object
  GetBookingsResponse:
    properties:
      bookings:
        items:
          $ref: '#/definitions/BookingInfo'
        type: array
      response:
        $ref: '#/definitions/Response'
    type: object
  GetVacantDateResponse:
    properties:
      intervals:
        items:
          $ref: '#/definitions/Interval'
        type: array
      response:
        $ref: '#/definitions/Response'
    type: object
  GetVacantRoomsResponse:
    properties:
      response:
        $ref: '#/definitions/Response'
      rooms:
        items:
          $ref: '#/definitions/Suite'
        type: array
    type: object
  Interval:
    properties:
      end:
        description: Номер свободен по
        example: "2024-04-10T15:04:05Z"
        type: string
      start:
        description: Номер свободен с
        example: "2024-03-10T15:04:05Z"
        type: string
    type: object
  Response:
    properties:
      code:
        description: application-specific error code
        type: integer
      error:
        description: application-level error message, for debugging
        type: string
      status:
        description: user-level status message
        type: string
    type: object
  SignInResponse:
    properties:
      response:
        $ref: '#/definitions/Response'
      token:
        description: JWT токен для доступа
        type: string
    type: object
  Suite:
    properties:
      capacity:
        description: Вместимость в персонах
        example: 4
        type: integer
      name:
        description: Название апартаментов
        example: Winston Churchill
        type: string
      suiteID:
        description: Номер апартаментов
        example: 1
        type: integer
    type: object
  UpdateBookingRequest:
    properties:
      endDate:
        description: Дата и время окончания бронирования
        example: "2024-03-29T17:43:00Z"
        type: string
      notifyAt:
        description: Интервал времени для уведомления о бронировании
        example: 24h
        type: string
      startDate:
        description: Дата и время начала бронировании
        example: "2024-03-28T17:43:00Z"
        type: string
      suiteID:
        description: Номер апартаментов
        example: 1
        format: int64
        type: integer
    required:
    - endDate
    - startDate
    - suiteID
    type: object
  UpdateBookingResponse:
    properties:
      response:
        $ref: '#/definitions/Response'
    type: object
  User:
    properties:
      name:
        description: Имя пользователя
        example: Pavel Durov
        type: string
      password:
        description: Пароль
        example: "12345"
        type: string
      telegramID:
        description: Телеграм ID пользователя
        example: 1235678
        type: integer
      telegramNickname:
        description: Никнейм пользователя в телеграме
        example: pavel_durov
        type: string
    required:
    - name
    - password
    - telegramID
    - telegramNickname
    type: object
host: 127.0.0.1:3000
info:
  contact:
    name: Nikita Denisenok
    url: https://vk.com/ndenisenok
  description: This is a service for writing and reading booking entries.
  license:
    name: GNU 3.0
    url: https://www.gnu.org/licenses/gpl-3.0.ru.html
  termsOfService: http://swagger.io/terms/
  title: booking-schedule API
  version: "1.0"
paths:
  /{booking_id}/delete:
    delete:
      description: Deletes an booking with given UUID.
      operationId: removeByBookingID
      parameters:
      - default: 550e8400-e29b-41d4-a716-446655440000
        description: booking_id
        format: uuid
        in: path
        name: booking_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeleteBookingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DeleteBookingResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DeleteBookingResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DeleteBookingResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/DeleteBookingResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/DeleteBookingResponse'
      security:
      - Bearer: []
      summary: Deletes an booking
      tags:
      - bookings
  /{booking_id}/get:
    get:
      description: Responds with booking info for booking with given BookingID.
      operationId: getBookingbyTag
      parameters:
      - default: 550e8400-e29b-41d4-a716-446655440000
        description: booking_id
        format: uuid
        in: path
        name: booking_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetBookingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/GetBookingResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/GetBookingResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/GetBookingResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/GetBookingResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/GetBookingResponse'
      security:
      - Bearer: []
      summary: Get booking info
      tags:
      - bookings
  /{booking_id}/update:
    patch:
      consumes:
      - application/json
      description: 'Updates an existing booking with given BookingID, suiteID, startDate,
        endDate values (notificationPeriod being optional). Implemented with the use
        of transaction: first room availibility is checked. In case one attempts to
        alter his previous booking (i.e. widen or tighten its'' limits) the booking
        is updated.  If it overlaps with smb else''s booking or with clients'' another
        booking the request is considered unsuccessful. startDate parameter  is to
        be before endDate and both should not be expired.'
      operationId: modifyBookingByJSON
      parameters:
      - default: 550e8400-e29b-41d4-a716-446655440000
        description: booking_id
        format: uuid
        in: path
        name: booking_id
        required: true
        type: string
      - description: UpdateBookingRequest
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/UpdateBookingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UpdateBookingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/UpdateBookingResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/UpdateBookingResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/UpdateBookingResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/UpdateBookingResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/UpdateBookingResponse'
      security:
      - Bearer: []
      summary: Updates booking info
      tags:
      - bookings
  /{suite_id}/get-vacant-dates:
    get:
      description: Responds with list of vacant intervals within month for selected
        suite.
      operationId: getDatesBySuiteID
      parameters:
      - default: 1
        description: suite_id
        format: int64
        in: path
        name: suite_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetVacantDateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/GetVacantDateResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/GetVacantDateResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/GetVacantDateResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/GetVacantDateResponse'
      summary: Get vacant intervals
      tags:
      - bookings
  /add:
    post:
      consumes:
      - application/json
      description: 'Adds an  associated with user with given parameters. NotificationPeriod
        is optional and must look like {number}s,{number}m or {number}h. Implemented
        with the use of transaction: first rooms availibility is checked. In case
        one''s new booking request intersects with and old one(even if belongs to
        him), the request is considered erratic. startDate is to be before endDate
        and both should not be expired.'
      operationId: addByBookingJSON
      parameters:
      - description: AddBookingRequest
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/AddBookingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AddBookingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/AddBookingResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/AddBookingResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/AddBookingResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/AddBookingResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/AddBookingResponse'
      security:
      - Bearer: []
      summary: Adds booking
      tags:
      - bookings
  /get-bookings:
    get:
      description: Responds with series of booking info objects within given time
        period. The query parameters are start date and end date (start is to be before
        end and both should not be expired).
      operationId: getMultipleBookingsByTag
      parameters:
      - default: 2024-03-28T17:43:00
        description: start
        format: time.Time
        in: query
        name: start
        required: true
        type: string
      - default: 2024-03-29T17:43:00
        description: end
        format: time.Time
        in: query
        name: end
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetBookingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/GetBookingsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/GetBookingsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/GetBookingsResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/GetBookingsResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/GetBookingsResponse'
      security:
      - Bearer: []
      summary: Get several bookings info
      tags:
      - bookings
  /get-vacant-rooms:
    get:
      description: Receives two dates as query parameters. start is to be before end
        and both should not be expired. Responds with list of vacant rooms and their
        parameters for given interval.
      operationId: getRoomsByDates
      parameters:
      - default: 2024-03-28T17:43:00
        description: start
        format: time.Time
        in: query
        name: start
        required: true
        type: string
      - default: 2024-03-29T17:43:00
        description: end
        format: time.Time
        in: query
        name: end
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetVacantRoomsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/GetVacantRoomsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/GetVacantRoomsResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/GetVacantRoomsResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/GetVacantRoomsResponse'
      summary: Get list of vacant rooms
      tags:
      - bookings
  /user/sign-in:
    get:
      description: Get auth token to access user restricted api methods. Requires
        nickname and password passed via basic auth.
      operationId: getOauthToken
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/SignInResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/SignInResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/SignInResponse'
      security:
      - BasicAuth: []
      summary: Sign in
      tags:
      - users
  /user/sign-up:
    post:
      consumes:
      - application/json
      description: Creates user with given tg id, nickname, name and password hashed
        by bcrypto. Every parameter is required. Returns jwt token.
      operationId: signUpUserJson
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/SignInResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/SignInResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/SignInResponse'
      summary: Sign up
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BasicAuth:
    type: basic
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: operations with bookings, suites and intervals
  name: bookings
- description: operations with user profile such as sign in, sign up, getting profile
    editing it and deleting
  name: users
