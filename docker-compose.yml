version: "3.8"

networks:
  app_net:
    driver: bridge

volumes:
  postgres-volume:
  certificates-volume:

services:
  nginx-entrypoint:
    image: nginx
    hostname: nginx-entrypoint
    container_name: nginx-entrypoint
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    volumes:
      - certificates-volume:/etc/ssl/certs
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
      - 443:443
    networks:
      - app_net
    depends_on:
      - booking
      - auth
  db:
    container_name: booking-storage
    image: postgres:16-alpine3.19
    environment:
      - "POSTGRES_DB=${DB_NAME}"
      - "POSTGRES_USER=${DB_USER}"
      - "POSTGRES_PASSWORD=${DB_PASSWORD}"
      - "PGDATA=${PGDATA}"
    volumes: 
      - postgres-volume:/var/lib/postgresql/data
    #  - ./deploy/database/init.sql:/docker-entrypoint-initdb.d/init.sql 
    ports:
      - "${DB_PORT}:${DB_PORT}"
    expose:
    - "${DB_PORT}" 
    command: -p ${DB_PORT}
    networks:
      - app_net

  booking:
    container_name: booking
    build:
      context: .
      dockerfile: ./deploy/bookings/Dockerfile
    image: nikitads9/booking-schedule:booking
    volumes:
      - certificates-volume:/etc/ssl/certs
    ports:
      - "${BOOKINGS_PORT}:${BOOKINGS_PORT}"
    depends_on:
      - db
      - jaeger
    networks:
      - app_net
    deploy:
      resources:
        limits:
          memory: 200m
          cpus: "0.50"

  auth:
    container_name: auth
    build:
      context: .
      dockerfile: ./deploy/auth/Dockerfile
    image: nikitads9/booking-schedule:auth
    volumes:
      - certificates-volume:/etc/ssl/certs
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    depends_on:
      - db
      - jaeger
    networks:
      - app_net
    deploy:
      resources:
        limits:
          memory: 200m
          cpus: "0.70"

  migrator:
    container_name: migrator
    build: $MIGRATION_DIR
    restart: on-failure
    image: nikitads9/booking-schedule:migrator
    environment:
      - "GOOSE_DRIVER=postgres"
      - "GOOSE_DBSTRING=host=${DB_HOST} port=${DB_PORT} dbname=${DB_NAME} user=${DB_USER} password=${DB_PASSWORD} sslmode=${DB_SSL}"
      - "MIGRATION_DIR=${MIGRATION_DIR}"
    depends_on:
      - db
    networks:
      - app_net

  scheduler:
    container_name: scheduler
    build:
      context: .
      dockerfile: ./deploy/scheduler/Dockerfile
    image: nikitads9/booking-schedule:scheduler
    restart: unless-stopped
    environment:
      - "DB_NAME=${DB_NAME}"
      - "DB_USERNAME=${DB_USER}"
      - "DB_PASSWORD=${DB_PASSWORD}"
      - "DB_HOST=${DB_HOST}"
    depends_on:
      - db
      - queue
    networks:
      - app_net
    deploy:
      resources:
        limits:
          memory: 200m
          cpus: "0.30"

  sender:
    container_name: sender
    build:
      context: .
      dockerfile: ./deploy/sender/Dockerfile
    image: nikitads9/booking-schedule:sender
    restart: unless-stopped
    depends_on:
      - queue
    networks:
      - app_net
    deploy:
      resources:
        limits:
          memory: 200m
          cpus: "0.30"


  queue:
    container_name: queue
    image: rabbitmq:3.13.0-management-alpine
    environment:
      RABBITMQ_DEFAULT_PASS: ${AMQP_PASS}
      RABBITMQ_DEFAULT_USER: ${AMQP_USER}
      RABBITMQ_DEFAULT_VHOST: ${AMQP_VHOST}
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    ports:
      - "${AMQP_PORT}:${AMQP_PORT}"
      - "15672"
    expose:
      - "${AMQP_PORT}"
    networks:
      - app_net

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "5775:5775/udp" # agent accept zipkin.thrift over compact thrift protocol (deprecated, used by legacy clients only)
      - "6831:6831/udp" # agent accept jaeger.thrift over compact thrift protocol
      - "6832:6832/udp" # agent accept jaeger.thrift over binary thrift protocol
      - "5778:5778" # agent serve configs
      - "16686:16686" # query serve frontend (Jaeger UI)
      - "14268:14268" # collector accept jaeger.thrift directly from clients
      - "14250:14250" # collector accept model.proto
      - "9411:9411" # collector Zipkin compatible endpoint (optional)
      - "4317:4317" # OTLP collector grpc
      - "4318:4318" # OTLP collector http
    networks:
      - app_net

